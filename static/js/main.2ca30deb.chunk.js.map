{"version":3,"sources":["components/SearchField.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","redux/actions.js","redux/constants.js","redux/reducers/searchFieldReducer.js","redux/reducers/requestRobotsReducer.js","redux/reducers/rootReducer.js","serviceWorker.js","index.js"],"names":["SearchField","_ref","onSearchChange","react_default","a","createElement","className","type","placeholder","onChange","Card","id","name","email","src","concat","alt","CardList","robots","map","robot","components_Card","key","Scroll","props","style","overflow","border","height","children","App","componentDidMount","_this","requestRobots","event","searchFieldChange","_this$props","this","searchField","isPending","error","filterRobots","filter","toLowerCase","includes","components_SearchField","length","components_CardList","Component","connect","state","searchFieldReducer","requestRobotsReducer","dispatch","payload","target","value","fetch","then","response","json","data","catch","initState","arguments","undefined","action","Object","assign","rootReducer","combineReducers","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","createLogger","ReactDOM","render","react_redux_es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ca30deb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst SearchField = ({ onSearchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"text\" placeholder=\"search robots\" onChange={onSearchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchField;\r\n","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"name\" />\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n                <div>\r\n                    {robots.map(robot => {\r\n                        return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\r\n                    })}\r\n                </div>\r\n            )\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nexport default (props) => {\r\n    return (\r\n      <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n        {props.children}\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport SearchField from '../components/SearchField'\r\nimport CardList from '../components/CardList'\r\nimport Scroll from '../components/Scroll'\r\nimport {searchField, requestRobots} from '../redux/actions'\r\nimport './App.css'\r\n\r\nconst mapStateToProps = (state) => ({\r\n    searchField: state.searchFieldReducer.searchField,\r\n    isPending: state.requestRobotsReducer.isPending,\r\n    robots: state.requestRobotsReducer.robots,\r\n    error: state.requestRobotsReducer.error\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    searchFieldChange: (event) => {dispatch(searchField(event.target.value))},\r\n    requestRobots: () => {dispatch(requestRobots())}\r\n})\r\n\r\nclass App extends Component{\r\n   \r\n    componentDidMount = () => {\r\n        this.props.requestRobots()\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.props.searchFieldChange(event)\r\n    }\r\n\r\n    render(){\r\n        const {searchField, isPending, robots, error} = this.props\r\n        let filterRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return isPending ?\r\n        (<h1>Loading</h1>):\r\n        (\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <SearchField onSearchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    {error.length === 0 ? <CardList robots={filterRobots} /> : <h1>{error}</h1>}\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { \r\n    SEARCH_FIELD_CHANGE,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\nexport const searchField = (text) => {\r\n    return {\r\n        type: SEARCH_FIELD_CHANGE,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type:REQUEST_ROBOTS_PENDING, payload: true})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => {dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data})})\r\n        .catch(error => {dispatch({type: REQUEST_ROBOTS_FAILED, payload: error})})\r\n}","export const SEARCH_FIELD_CHANGE = 'SEARCH_FIELD_CHANGE'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED  = 'REQUEST_ROBOTS_FAILED'","import {SEARCH_FIELD_CHANGE} from '../constants'\r\n\r\nconst initState = {\r\n    searchField: ''\r\n}\r\n\r\nconst searchFieldReducer = (state=initState, action) => {\r\n    switch (action.type) {\r\n        case SEARCH_FIELD_CHANGE:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default searchFieldReducer","import {\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from '../constants';\r\n\r\nconst initState = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nconst requestRobotsReducer = (state=initState, action) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state,  {error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default requestRobotsReducer","import { combineReducers } from 'redux'\r\nimport searchFieldReducer from './searchFieldReducer'\r\nimport requestRobotsReducer from './requestRobotsReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    searchFieldReducer,\r\n    requestRobotsReducer,\r\n})\r\n\r\nexport default rootReducer","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, applyMiddleware} from 'redux'\nimport {createLogger} from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport {Provider} from 'react-redux'\nimport './index.css';\nimport App from './containers/App';\nimport rootReducer from './redux/reducers/rootReducer'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, createLogger()))\n\nReactDOM.render(\n    (<Provider store={store}>\n        <App />\n    </Provider>), \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}